<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~  Licensed under the Apache License, Version 2.0 (the "License");
  ~  you may not use this file except in compliance with the License.
  ~  You may obtain a copy of the License at
  ~
  ~       http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~  Unless required by applicable law or agreed to in writing, software
  ~  distributed under the License is distributed on an "AS IS" BASIS,
  ~  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~  See the License for the specific language governing permissions and
  ~  limitations under the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.tomato.study.rpc</groupId>
    <artifactId>tomato-rpc</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <!-- framework module -->
        <module>tomato-rpc-core</module>
        <module>tomato-rpc-netty</module>
        <module>tomato-rpc-common</module>
        <module>tomato-rpc-spring-boot-starter</module>
        <module>tomato-rpc-registry-zookeeper</module>
        <module>tomato-rpc-config</module>
        <module>tomato-rpc-expression</module>
        <module>tomato-rpc-dashboard</module>

        <!-- sample module -->
        <module>tomato-rpc-sample-server</module>
        <module>tomato-rpc-sample-client</module>
        <module>tomato-rpc-sample-api</module>
        <module>tomato-rpc-spring-sample-server</module>
        <module>tomato-rpc-spring-sample-client</module>
    </modules>

    <properties>
        <encoding>UTF-8</encoding>
        <java.version>11</java.version>
        <maven-compile-plugin.version>3.8.0</maven-compile-plugin.version>
        <jacoco.version>0.8.7</jacoco.version>
        <protostuff.version>1.7.2</protostuff.version>
        <powermock.version>2.0.2</powermock.version>
        <netty.version>4.1.56.Final</netty.version>
        <lombok.version>1.18.14</lombok.version>
        <junit.version>4.12</junit.version>
        <itranswarp.version>1.0</itranswarp.version>
        <common-lang3.version>3.9</common-lang3.version>
        <commons-collections4.version>4.3</commons-collections4.version>
        <zookeeper.version>3.5.9</zookeeper.version>
        <curator.version>4.0.0</curator.version>
        <slf4j.version>1.7.30</slf4j.version>
        <logback.version>1.2.3</logback.version>
        <log4j2.version>2.16.0</log4j2.version>
        <metrics.version>4.1.1</metrics.version>
        <gson.version>2.8.5</gson.version>
        <jackson.version>2.10.1</jackson.version>
        <spring-boot.version>2.2.2.RELEASE</spring-boot.version>
        <curator-test.version>2.12.0</curator-test.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-netty</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-common</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-core</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-registry-zookeeper</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-config</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-sample-api</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-spring-boot-starter</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-dashboard</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.tomato.study.rpc</groupId>
                <artifactId>tomato-rpc-expression</artifactId>
                <version>${project.version}</version>
            </dependency>

            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <!-- https://mvnrepository.com/artifact/junit/junit -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>org.powermock</groupId>
                <artifactId>powermock-api-mockito2</artifactId>
                <version>${powermock.version}</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.powermock</groupId>
                <artifactId>powermock-module-junit4</artifactId>
                <version>${powermock.version}</version>
                <scope>test</scope>
            </dependency>

            <!-- https://mvnrepository.com/artifact/com.itranswarp/compiler -->
            <dependency>
                <groupId>com.itranswarp</groupId>
                <artifactId>compiler</artifactId>
                <version>${itranswarp.version}</version>
            </dependency>


            <dependency>
                <groupId>io.protostuff</groupId>
                <artifactId>protostuff-core</artifactId>
                <version>${protostuff.version}</version>
            </dependency>

            <dependency>
                <groupId>io.protostuff</groupId>
                <artifactId>protostuff-runtime</artifactId>
                <version>${protostuff.version}</version>
            </dependency>

            <dependency>
                <groupId>io.netty</groupId>
                <artifactId>netty-all</artifactId>
                <version>${netty.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${common-lang3.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-collections4</artifactId>
                <version>${commons-collections4.version}</version>
            </dependency>

            <!-- zookeeper -->
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-framework</artifactId>
                <version>${curator.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.zookeeper</groupId>
                        <artifactId>zookeeper</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-recipes</artifactId>
                <version>${curator.version}</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.apache.zookeeper</groupId>
                        <artifactId>zookeeper</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.apache.zookeeper</groupId>
                <artifactId>zookeeper</artifactId>
                <version>${zookeeper.version}</version>
            </dependency>

            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>slf4j-api</artifactId>
                <version>${slf4j.version}</version>
            </dependency>
            <!-- logback -->
            <dependency>
                <groupId>ch.qos.logback</groupId>
                <artifactId>logback-classic</artifactId>
                <version>${logback.version}</version>
            </dependency>

            <!-- log4j2 -->
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-core</artifactId>
                <version>${log4j2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-api</artifactId>
                <version>${log4j2.version}</version>
            </dependency>
            <dependency>
                <groupId>org.apache.logging.log4j</groupId>
                <artifactId>log4j-slf4j-impl</artifactId>
                <version>${log4j2.version}</version>
            </dependency>

            <!-- metrics -->
            <dependency>
                <groupId>io.dropwizard.metrics</groupId>
                <artifactId>metrics-core</artifactId>
                <version>${metrics.version}</version>
            </dependency>
            <dependency>
                <groupId>io.dropwizard.metrics</groupId>
                <artifactId>metrics-jmx</artifactId>
                <version>${metrics.version}</version>
            </dependency>

            <!-- gson -->
            <dependency>
                <groupId>com.google.code.gson</groupId>
                <artifactId>gson</artifactId>
                <version>${gson.version}</version>
            </dependency>

            <!-- jackson -->
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
            <dependency>
                <groupId>com.fasterxml.jackson.datatype</groupId>
                <artifactId>jackson-datatype-jsr310</artifactId>
                <version>${jackson.version}</version>
            </dependency>

            <!-- spring configuration -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-autoconfigure</artifactId>
                <version>${spring-boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <type>pom</type>
                <scope>import</scope>
                <version>${spring-boot.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.curator</groupId>
                <artifactId>curator-test</artifactId>
                <version>${curator-test.version}</version>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <!-- compile -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compile-plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <encoding>${encoding}</encoding>
                    </configuration>
                </plugin>


                <!-- jacoco -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${jacoco.version}</version>
                    <configuration>
                        <excludes>
                            <!-- 配置想要排除的包路径 -->

                            <exclude>org/tomato/study/rpc/sample/*</exclude>-->

                            <!-- 排除指定格式的类 -->
<!--                        <exclude>**/*ShortUrl.class</exclude>-->
<!--                        <exclude>**/*ShortUrlVisit.class</exclude>-->
                        </excludes>
                    </configuration>
                    <executions>
                        <execution>
                            <id>default-prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <configuration>
                                <!-- 指定覆盖率报告的生成位置 -->
                                <outputDirectory>${basedir}/target/coverage-reports</outputDirectory>
                            </configuration>
                            <id>default-report</id>
                            <phase>prepare-package</phase>
                            <goals>
                                <goal>report</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

</project>