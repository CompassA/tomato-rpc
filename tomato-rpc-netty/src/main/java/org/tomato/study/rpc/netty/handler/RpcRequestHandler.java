package org.tomato.study.rpc.netty.handler;

import io.netty.channel.ChannelHandler;
import org.tomato.study.rpc.core.ProviderRegistry;
import org.tomato.study.rpc.core.Serializer;
import org.tomato.study.rpc.core.ServerHandler;
import org.tomato.study.rpc.core.data.Command;
import org.tomato.study.rpc.core.data.CommandFactory;
import org.tomato.study.rpc.core.data.CommandType;
import org.tomato.study.rpc.core.data.Header;
import org.tomato.study.rpc.core.error.TomatoRpcException;
import org.tomato.study.rpc.core.spi.SpiLoader;
import org.tomato.study.rpc.netty.data.RpcRequest;
import org.tomato.study.rpc.netty.data.RpcResponse;
import org.tomato.study.rpc.netty.serializer.SerializerHolder;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

/**
 * @author Tomato
 * Created on 2021.04.18
 */
@ChannelHandler.Sharable
public class RpcRequestHandler implements ServerHandler {

    /**
     * server provider map:
     * id generated by this#providerId -> provider instance
     */
    private final ProviderRegistry providerRegistry = SpiLoader.getLoader(ProviderRegistry.class).load();

    @Override
    public Command handle(Command command) {
        Header header = command.getHeader();
        Serializer serializer = SerializerHolder.getSerializer(header.getSerializeType());
        try {
            // deserialize the RPC request
            RpcRequest request = serializer.deserialize(command.getBody(), RpcRequest.class);

            // get class interface
            String interfaceName = request.getInterfaceName();
            Class<?> providerInterface;
            try {
                providerInterface = Class.forName(interfaceName);
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
                throw new TomatoRpcException("provider interface not found: " +interfaceName);
            }

            // search the RPC service provider
            Object provider = providerRegistry.getProvider(request.getServiceVIP(), providerInterface);
            if (provider == null) {
                throw new TomatoRpcException("provider not found: " + interfaceName);
            }

            // search the method of the provider
            Method method;
            try {
                method = providerInterface.getMethod(request.getMethodName(), request.getArgsType());
            } catch (NoSuchMethodException | SecurityException e) {
                e.printStackTrace();
                throw new TomatoRpcException("provider method not found: " + request.getMethodName());
            }

            // invoke the method and write response data
            try {
                Object result = method.invoke(provider, request.getParameters());
                return CommandFactory.INSTANCE.response(
                        header.getId(),
                        RpcResponse.success(result),
                        serializer,
                        CommandType.RPC_RESPONSE);
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
                e.printStackTrace();
                throw new TomatoRpcException("rpc method call failed: " + method.getName());
            }
        } catch (TomatoRpcException exception) {
            return CommandFactory.INSTANCE.response(
                    header.getId(),
                    RpcResponse.fail(exception),
                    serializer,
                    CommandType.RPC_REQUEST);

        }
    }

    @Override
    public CommandType getType() {
        return CommandType.RPC_REQUEST;
    }
}
