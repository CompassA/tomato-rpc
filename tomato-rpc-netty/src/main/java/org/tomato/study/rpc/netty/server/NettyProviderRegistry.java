package org.tomato.study.rpc.netty.server;

import org.apache.commons.lang3.StringUtils;
import org.tomato.study.rpc.core.ProviderRegistry;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * @author Tomato
 * Created on 2021.06.19
 */
public class NettyProviderRegistry implements ProviderRegistry {

    /**
     * server provider map:
     * id generated by this#providerId -> provider instance
     */
    private final ConcurrentMap<String, Object> providerMap = new ConcurrentHashMap<>(0);

    @Override
    public <T> void register(String vip, T instance, Class<T> providerInterface) {
        if (StringUtils.isBlank(vip) || instance == null || !providerInterface.isInterface()) {
            throw new IllegalCallerException("register invalid data");
        }
        providerMap.put(providerId(providerInterface.getName(), vip), instance);
    }

    @Override
    public Object getProvider(String vip, Class<?> providerInterface) {
        if (providerInterface == null || StringUtils.isBlank(vip)) {
            return null;
        }
        String providerId = providerId(providerInterface.getCanonicalName(), vip);
        return providerMap.get(providerId);
    }

    private String providerId(String interfaceName, String vip) {
        return interfaceName + "$" + vip;
    }
}
